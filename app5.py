import requests
from bs4 import BeautifulSoup
# 숙제 : 다음 종목들의 현재 가격을 모두 txt 파일로 저장하려면?
종목들 = ["005930", "066575", "005380", "035720", "034220", "003490"] # 삼성전자, LG전자, 현대차, 카카오, LG디스플레이, 대한항공
# 종목코드와 종목명을 딕셔너리로 관리
종목정보 = {
    "005930": "삼성전자",
    "066575": "LG전자",
    "005380": "현대차",
    "035720": "카카오",
    "034220": "LG디스플레이",
    "003490": "대한항공"
}

def 현재가(종목코드):
    데이터 = requests.get("https://finance.naver.com/item/sise.nhn?code={}".format(종목코드))
    soup = BeautifulSoup(데이터.content, 'html.parser')
    현재가격 = soup.find_all('strong', id="_nowVal")[0].text
    거래량 = soup.find('span', id="_quant").text
    
    # 전일비 정보는 선택적으로 가져오기
    전일비 = soup.find('span', id="_rate")
    전일비_정보 = 전일비.text if 전일비 else "정보 없음"
    
    print(f"[{종목정보[종목코드]}]")
    print(f"현재가: {현재가격}")
    print(f"거래량: {거래량}")
    print(f"전일비: {전일비_정보}")
    print("-" * 30)
    
    return 현재가격

# 이 파일을 전부 txt 파일로 저장하려면?
f = open("현재가.txt", "w")
# 방법 1 : 하드코딩
# f.write(현재가("005930"))
# f.write(현재가("066575"))
# f.write(현재가("005380"))
# f.write(현재가("035720"))
# f.write(현재가("034220"))
# f.write(현재가("003490"))

# 방법 2 : 배열에 담은 데이터를 하나씩 꺼내서 쓰기
# f.write(종목들[0] + " : " + 현재가(종목들[0]) + "\n")
# f.write(종목들[1] + " : " + 현재가(종목들[1]) + "\n")
# f.write(종목들[2] + " : " + 현재가(종목들[2]) + "\n")
# f.write(종목들[3] + " : " + 현재가(종목들[3]) + "\n")
# f.write(종목들[4] + " : " + 현재가(종목들[4]) + "\n")
# f.write(종목들[5] + " : " + 현재가(종목들[5]) + "\n")
# f.close()

# 방법 3 : 반복문 사용
# 형태 1
# for i in range(len(종목들)): # 6
#     f.write(종목들[i] + " : " + 현재가(종목들[i]) + "\n")
# f.close()
for i in range(len(종목들)): # 6
    종목코드 = 종목들[i]
    종목명 = 종목정보[종목코드]
    f.write(f"{종목명}({종목코드}) : {현재가(종목코드)}\n")
f.close()

# 형태 2
# for 종목 in 종목들:
#     f.write(종목 + " : " + 현재가(종목) + "\n")
# f.close()


# 반복문을 언제 쓰냐면
# 1. 리스트나 딕셔너리에 담은 데이터를 하나씩 꺼내서 쓰고 싶을 때
# 2. 같은 코드를 여러 번 실행해야 할 때 (예: 여러 종목의 주가를 가져올 때)
# 3. 특정 조건이 만족될 때까지 반복해야 할 때 (예: 사용자가 올바른 입력을 할 때까지)

# 반복문을 쓰려면 먼저 배열이나 딕셔너리를 만들어야 함.
# 배열은 데이터를 순서대로 저장하는 자료구조
# 딕셔너리는 키와 값의 쌍으로 이루어진 자료구조
# 배열은 인덱스를 사용하여 데이터에 접근
# 딕셔너리는 키를 사용하여 데이터에 접근

# 배열 예시
배열 = ["사과", "바나나", "딸기", "포도"]
# 딕셔너리 예시
딕셔너리 = {
    "사과": 1000,
    "바나나": 2000,
    "딸기": 3000,
    "포도": 4000
}

# 배열 접근
print(배열[0]) # 출력: 사과
print(배열[1]) # 출력: 바나나

# 딕셔너리 접근
print(딕셔너리["사과"]) # 출력: 1000
print(딕셔너리["바나나"]) # 출력: 2000

# 배열과 딕셔너리의 차이점
# 배열은 순서가 있는 데이터 집합
# 딕셔너리는 키와 값의 쌍으로 이루어진 데이터 집합
# 배열은 인덱스를 사용하여 데이터에 접근
# 딕셔너리는 키를 사용하여 데이터에 접근    

# 리스트, 딕셔너리를 반복문 돌리면 리스트의 자료 개수만큼 반복됨
# 배열의 자료 개수를 구하려면 len() 함수 사용
# i 변수는 리스트 안에 있던 데이터 하나하나를 가리키는 변수
# 반복문 안에서 사용되는 변수는 반복문 밖에서 사용되는 변수와 이름이 같아도 상관 없음
